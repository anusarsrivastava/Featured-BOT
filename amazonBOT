import csv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

#Import ASIN ID of Amazon Product
f = open("C:/Users/anusa/Desktop/my_code_ver_2.0/go/Supporting Tools/Amazon Product Scraper/text.txt", 'r+') #for opening file
amazon_product_list = f.read() #for read
amazon_product_list = amazon_product_list.split('\n')
f.close() #close    

def catch_data(xPath):
    return xPath.get_attribute("innerHTML")

class Bot:   
    def Product(self, product):
        url = 'https://www.amazon.in/F/dp/' + product

        options = Options()
        options.headless = False
        options.add_experimental_option("detach", True)
        
        browser = webdriver.Chrome(ChromeDriverManager().install(), options=options)
        browser.maximize_window()
        browser.get(url)
        browser.set_page_load_timeout(10)

        #Check ASIN status
        try:
            #Product Title
            xPath = browser.find_element_by_xpath('//*[@id="productTitle"]')
            title = catch_data(xPath).splitlines()[1]
            try:
                #Product Title
                xPath = browser.find_element_by_xpath('//*[@id="productTitle"]')
                title = catch_data(xPath).splitlines()[1]

                #Product Category
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="wayfinding-breadcrumbs_feature_div"]/ul')
                    product_category = catch_data(xPath).splitlines()[3].strip() +" > "+ catch_data(xPath).splitlines()[11].strip() +" > "+ catch_data(xPath).splitlines()[19].strip()
                except:
                    xPath = browser.find_element_by_xpath('//*[@id="wayfinding-breadcrumbs_feature_div"]/ul')
                    product_category = catch_data(xPath).splitlines()[3].strip() +" > "+ catch_data(xPath).splitlines()[11].strip() #+" > "+ catch_data(xPath).splitlines()[19].strip()
                
                #Product Edition (Not Fixed, expect comment is not display)
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="bylineInfo"]')
                    product_edition = catch_data(xPath).splitlines()[7]
                except:
                    product_edition = "Not Set "

                #Product Preview Images Count
                xPath = browser.find_element_by_xpath('//*[@id="imgThumbs"]/span/a')
                product_preview_image = catch_data(xPath).splitlines()[0].split(' ')[2]
                if product_preview_image == "image":
                    product_preview_image = "1"
                else:
                    product_preview_image = product_preview_image

                #Author Name
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="bylineInfo"]/span/span[1]/a')
                except:
                    xPath = browser.find_element_by_xpath('//*[@id="bylineInfo"]/span/a')
                author = catch_data(xPath).splitlines()[0]

                #Introduction
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="bylineInfo"]/span[2]/a')
                    introduction = catch_data(xPath).splitlines()[0]
                except:
                    introduction = "Not Set"

                #Book Review
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="acrPopover"]/span[1]/a/i[1]/span')
                    book_review = catch_data(xPath)
                except:
                    book_review = "0"

                #Book Rating
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="acrCustomerReviewText"]')
                    book_rating = catch_data(xPath)
                except:
                    book_rating = "0"

                #Availability
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="availability"]/span')
                    availability = catch_data(xPath).splitlines()[3]
                except:
                    availability = "Not available"

                #Product Formate Kindle
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="a-autoid-6-announce"]/span[1]')
                    product_formate_kindle = catch_data(xPath)
                except:
                    product_formate_kindle = "Not available"

                #Product Formate Paperback
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="a-autoid-7-announce"]/span[1]')
                    product_formate_paperback = catch_data(xPath)
                except: 
                    try:
                        xPath = browser.find_element_by_xpath('//*[@id="a-autoid-2-announce"]/span[1]')
                        product_formate_paperback = catch_data(xPath)
                    except:
                        product_formate_paperback = "Not available"

                #Selling Price
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="soldByThirdParty"]/span')
                    NSP = catch_data(xPath)
                except:
                    NSP = "Not Found"

                #MRP Price
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="buyBoxInner"]/ul/li[1]/span/span[2]')
                    MRP = catch_data(xPath)
                except:
                    MRP = NSP

                #Sold by
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="sellerProfileTriggerId"]')
                    seller = catch_data(xPath)
                except:
                    seller = "Not Found"

                #Description -- Pending to fix (Not Mapped)
                xPath = browser.find_element_by_xpath('/html/body/div')
                description = catch_data(xPath)

                #Publisher
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[1]/span/span[2]')
                    publisher = catch_data(xPath)
                except:
                    publisher = "Not Found"

                #Language
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[2]/span/span[2]')
                    language = catch_data(xPath)
                except:
                    language = "Not Found"

                #Paperback 
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[3]/span/span[2]')
                    page_count = catch_data(xPath)
                except:
                    page_count = "Not Found"

                #ISBN-10
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[4]/span/span[2]')
                    ISBN_10 = catch_data(xPath)
                except:
                    ISBN_10 = "Not Found"

                #ISBN-13
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[5]/span/span[2]')
                    ISBN_13 = catch_data(xPath)
                except:
                    ISBN_13 = "Not Found"

                #Item Weight
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[6]/span/span[2]')
                    item_weight = catch_data(xPath)
                except:
                    item_weight = "Not Found"

                #Dimensions 
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[7]/span/span[2]')
                    dimensions = catch_data(xPath)
                except:
                    dimensions = "Not Found"

                #Country of Origin
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[8]/span/span[2]')
                    country_of_origin = catch_data(xPath)
                except:
                    country_of_origin = "Not Set"

                #Importer 
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[9]/span/span[2]')
                    importer = catch_data(xPath)
                except:
                    importer = "Not Found"

                #Packer 
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[10]/span/span[2]')
                    packer = catch_data(xPath)
                except:
                    packer = "Not Found"

                #Generic Name
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBullets_feature_div"]/ul/li[11]/span/span[2]')
                    generic_name = catch_data(xPath)
                except:
                    generic_name = "Not Found"

                #Best Sellers Rank
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li/span')
                    bsr_1 = catch_data(xPath).splitlines()[0]
                    bsr_1 = bsr_1.split('<')[0].split(' ')[1]
                except:
                    bsr_1 = "Not Ranked"

                #Best Sellers Rank (in)
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li/span')
                    bsr_1_in = catch_data(xPath).splitlines()[0]
                    bsr_1_in = bsr_1_in.split('<')[1].split('>')[1]
                except:
                    bsr_1_in = "Not Ranked"

                #Category Rank
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li[1]/span')
                    bsr_2 = catch_data(xPath).splitlines()[0]
                    bsr_2 = bsr_2.split('<')[0].split(' ')[1]
                except:
                    bsr_2 = "Not Ranked"

                #Category Rank (in)
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li[1]/span')
                    bsr_2_in = catch_data(xPath).splitlines()[0]
                    bsr_2_in = bsr_2_in.split('<')[1].split('>')[1]
                except:
                    bsr_2_in = "Not Ranked"

                #Product Category Rank
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li[2]/span')
                    bsr_3 = catch_data(xPath).splitlines()[0]
                    bsr_3 = bsr_3.split('<')[0].split(' ')[1]
                except:
                    bsr_3 = "Not Ranked"
                
                #Product Category Rank (in)
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="detailBulletsWrapper_feature_div"]/ul[1]/li/span/ul/li[2]/span')
                    bsr_3_in = catch_data(xPath).splitlines()[0]
                    bsr_3_in = bsr_3_in.split('<')[1].split('>')[1]
                except:
                    bsr_3_in = "Not Ranked"

                #From the Publisher (A+ Listing)
                try:
                    xPath = browser.find_element_by_xpath('//*[@id="aplus"]/h2')
                    a_plus_listing = catch_data(xPath)
                    if a_plus_listing == "From the Publisher":
                        a_plus_listing = "A+ Listing Live"
                except:
                    a_plus_listing = "Not Found"

                #Set of Details
                product_details = [product,title,product_category,product_edition,product_preview_image,author,introduction,book_review,book_rating,availability,product_formate_kindle,product_formate_paperback,NSP,MRP,seller,publisher,language,page_count,ISBN_10,ISBN_13,item_weight,dimensions,country_of_origin,importer,packer,generic_name,bsr_1,bsr_1_in,bsr_2,bsr_2_in,bsr_3,bsr_3_in,a_plus_listing]

                browser.close()
                #print(product_formate_paperback,product_formate_kindle)
                #print(product_details)
                return product_details
            except:
                return
        except:
            title = "ASIN is not working properly"
            product_details = [product,title]
            browser.close()
            return product_details
            
fetcher = Bot()

#Write the product details in CSV
with open('C:/Users/anusa/Desktop/my_code_ver_2.0/go/Supporting Tools/Amazon Product Scraper/product_details.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(['ASIN','title','Product Category','Product Edition','Product Preview Image Count','Author','Introduction','Review','Rating','Availability','Product Formate Kindle','Product Formate Paperback','Selling_Price','MRP_Price','Sold_by','Publisher','Language','Page Count','ISBN_10','ISBN_13','Item Weight','Dimensions','Country of Origin','Importer','Packer','Generic Name','Best Seller Rank','Best Seller Rank in','Categogy Rank','Categogy Rank in','Product Category Rank','Product Category Rank in','A+ Listing Status'])
    for amazon_product in amazon_product_list:
        writer.writerow(fetcher.Product(amazon_product))
